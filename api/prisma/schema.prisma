generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Operator {
  operatorId Int      @id @default(autoincrement())
  username   String   @unique
  name       String
  password   String
  type       UserType @default(USER)
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  access       Access[]
  scheduling   Scheduling[]
  lobbyProblem LobbyProblem[]
  logging      Logging[]
}

model Lobby {
  lobbyId      Int       @id @default(autoincrement())
  cnpj         String    @unique
  name         String
  responsible  String
  telephone    String
  schedules    String
  procedures   String?
  datasheet    String?
  cep          String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String?
  type         LobbyType
  exitControl  Status    @default(ACTIVE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  member        Member[]
  scheduling    Scheduling[]
  access        Access[]
  lobbyProblem  LobbyProblem[]
  lobbyCalendar LobbyCalendar[]
  device        Device[]
  visitor       Visitor[]
}

model Member {
  memberId            Int          @id @default(autoincrement())
  type                MemberType
  profileUrl          String?
  name                String
  rg                  String
  cpf                 String
  email               String?
  comments            String?
  status              Status       @default(ACTIVE)
  // ACCESS
  faceAccess          String?
  biometricAccess     String?
  remoteControlAccess String?
  passwordAccess      String?
  // RESIDENT
  address             String?
  addressType         AddressType? @relation(fields: [addressTypeId], references: [addressTypeId])
  addressTypeId       Int?
  // EMPLOYEE
  accessPeriod        String?
  position            String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  // WHERE IS THE MEMBER
  lobby               Lobby        @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId             Int

  tag        Tag[]
  scheduling Scheduling[]
  telephone  Telephone[]
  vehicle    Vehicle[]
  access     Access[]
}

model Telephone {
  telephoneId Int    @id @default(autoincrement())
  number      String

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int
}

model TagType {
  tagTypeId   Int    @id @default(autoincrement())
  description String
  // tag normal, veicular, cartao

  tag Tag[]
}

model Tag {
  tagId Int    @id @default(autoincrement())
  value String

  type      TagType @relation(fields: [tagTypeId], references: [tagTypeId])
  tagTypeId Int

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int
}

model VehicleType {
  vehicleTypeId Int    @id @default(autoincrement())
  description   String

  vehicle Vehicle[]
}

model Vehicle {
  vehicleId    Int     @id @default(autoincrement())
  licensePlate String  @unique
  brand        String?
  model        String?
  color        String?
  tag          String? @unique
  comments     String?

  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [vehicleTypeId])
  vehicleTypeId Int

  member   Member @relation(fields: [memberId], references: [memberId])
  memberId Int
}

model AddressType {
  addressTypeId Int    @id @default(autoincrement())
  description   String

  member Member[]
}

model VisitorType {
  visitorTypeId Int    @id @default(autoincrement())
  description   String

  visitor Visitor[]
}

model Visitor {
  visitorId  Int       @id @default(autoincrement())
  profileUrl String?
  name       String
  rg         String
  cpf        String
  phone      String
  startDate  DateTime?
  endDate    DateTime?
  status     Status    @default(ACTIVE)
  relation   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  visitorType   VisitorType @relation(fields: [visitorTypeId], references: [visitorTypeId])
  visitorTypeId Int

  lobby   Lobby? @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int?

  scheduling Scheduling[]
  access     Access[]
}

model Scheduling {
  schedulingId Int      @id @default(autoincrement())
  reason       String
  location     String
  startDate    DateTime
  endDate      DateTime
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  visitor   Visitor @relation(fields: [visitorId], references: [visitorId])
  visitorId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  member   Member? @relation(fields: [memberId], references: [memberId])
  memberId Int?

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model Access {
  accessId  Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  local     String?
  reason    String?
  comments  String?
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  member   Member? @relation(fields: [memberId], references: [memberId])
  memberId Int?

  visitor   Visitor @relation(fields: [visitorId], references: [visitorId])
  visitorId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model LobbyProblem {
  lobbyProblemId Int      @id @default(autoincrement())
  title          String
  description    String   @db.VarChar(1000)
  date           DateTime
  status         Status   @default(ACTIVE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model LobbyCalendar {
  lobbyCalendarId Int      @id @default(autoincrement())
  date            DateTime
  description     String

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int
}

model DeviceModel {
  deviceModelId Int    @id @default(autoincrement())
  model         String
  brand         String
  description   String

  device Device[]
}

model Device {
  deviceId    Int    @id @default(autoincrement())
  name        String
  ip          String
  ramal       Int
  description String

  deviceModel   DeviceModel @relation(fields: [deviceModelId], references: [deviceModelId])
  deviceModelId Int

  lobby   Lobby @relation(fields: [lobbyId], references: [lobbyId])
  lobbyId Int
}

model Logging {
  logId     Int      @id @default(autoincrement())
  date      DateTime @default(now())
  method    String
  url       String
  userAgent String

  operator   Operator @relation(fields: [operatorId], references: [operatorId])
  operatorId Int
}

model Feedback {
  feedbackId Int      @id @default(autoincrement())
  name       String?
  subject    String
  message    String   @db.VarChar(1000)
  response   String?  @db.VarChar(1000)
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserType {
  USER
  ADMIN
}

enum LobbyType {
  CONDOMINIUM
  COMPANY
}

enum MemberType {
  RESIDENT
  EMPLOYEE
}
